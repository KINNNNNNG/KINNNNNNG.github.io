<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://KINNNNNNG.github.io</id>
    <title>CURD的自我救赎</title>
    <updated>2021-11-02T13:48:01.672Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://KINNNNNNG.github.io"/>
    <link rel="self" href="https://KINNNNNNG.github.io/atom.xml"/>
    <logo>https://KINNNNNNG.github.io/images/avatar.png</logo>
    <icon>https://KINNNNNNG.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, CURD的自我救赎</rights>
    <entry>
        <title type="html"><![CDATA[Mybatis运行逻辑]]></title>
        <id>https://KINNNNNNG.github.io/post/mybatis-yun-xing-luo-ji/</id>
        <link href="https://KINNNNNNG.github.io/post/mybatis-yun-xing-luo-ji/">
        </link>
        <updated>2021-03-03T15:46:41.000Z</updated>
        <content type="html"><![CDATA[<p>用<strong>Resources.getResourceAsStream</strong>加载配置文件，转成字节输入流</p>
<p>将字节输入流作为参数传入<strong>SqlSessionFactoryBuilder.builder</strong>中进行配置解析，解析成<strong>Configuration</strong>对象，并创建<strong>DefaultSqlSessionFactory</strong>，由<strong>DefaultSqlSessionFactory.openSession</strong>生产<strong>SqlSession</strong>，同时生成<strong>Executor</strong>执行期</p>
<p>执行调用<strong>mapper</strong>里的方法时，传入<strong>statementId</strong>，和对应参数，<strong>sqlsession</strong>将执行任务交给<strong>Executor</strong>，<strong>executor</strong>将生成<strong>BoundSql</strong>，<strong>ParameterHandler</strong>，将<strong>BoundSql</strong>与参数传入<strong>ParameterHandler</strong>，由<strong>ParameterHandler</strong>对<strong>Statement</strong>对象进行参数设置，然后传参给<strong>TypeHandler</strong>，<strong>TypeHandler</strong>对<strong>JdbcType</strong>和<strong>JavaType</strong>进行解析，对<strong>statement</strong>进行特殊的参数设置（？），然后调用<strong>StatementHandler</strong>调用<strong>query</strong>方法去调用<strong>PreparedStatement</strong>执行SQL，将结果集交给<strong>ResultHandler</strong>进行转换，最后返回结果</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[XML方式加载mybatis配置文件（源码）]]></title>
        <id>https://KINNNNNNG.github.io/post/xml-fang-shi-jia-zai-mybatis-pei-zhi-wen-jian-yuan-ma/</id>
        <link href="https://KINNNNNNG.github.io/post/xml-fang-shi-jia-zai-mybatis-pei-zhi-wen-jian-yuan-ma/">
        </link>
        <updated>2021-03-03T13:55:12.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">// 1.读取配置文件，读成字节输入流(未解析)
    InputStream resourceAsStream = Resources.getResourceAsStream(&quot;sqlMapConfig.xml&quot;);

    // 2.解析字节输入流（配置文件），封装Configuration对象 创建DefaultSqlSessionFactor
    SqlSessionFactory build = new SqlSessionFactoryBuilder().build(resourceAsStream);
</code></pre>
<p>1.读取配置文件，读成字节输入流（未解析）</p>
<p>2.使用SqlSessionFactoryBuilder.build解析配置文件</p>
<pre><code class="language-java">public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
  try {
    // 创建XMLConfigBuilder，专门解析mybatis的配置文件的类
    XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
    //执行XML解析 parser.parse()
    //创建DefaultSqlSessionFactory
    return build(parser.parse());
  } catch (Exception e) {
    throw ExceptionFactory.wrapException(&quot;Error building SqlSession.&quot;, e);
  } finally {
    ErrorContext.instance().reset();
    try {
      inputStream.close();
    } catch (IOException e) {
      // Intentionally ignore. Prefer previous error.
    }
  }
</code></pre>
<p>3.<strong>XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);</strong> 解析Mybatis的配置文件</p>
<p>4.<strong>parser.parse()</strong> 调用<strong>parseConfiguration</strong>生成Configuration对象并返回</p>
<pre><code class="language-java">private void parseConfiguration(XNode root) {
  try {
    //issue #117 read properties first
    propertiesElement(root.evalNode(&quot;properties&quot;));
    Properties settings = settingsAsProperties(root.evalNode(&quot;settings&quot;));
    loadCustomVfs(settings);
    loadCustomLogImpl(settings);
    typeAliasesElement(root.evalNode(&quot;typeAliases&quot;));
    pluginElement(root.evalNode(&quot;plugins&quot;));
    objectFactoryElement(root.evalNode(&quot;objectFactory&quot;));
    objectWrapperFactoryElement(root.evalNode(&quot;objectWrapperFactory&quot;));
    reflectorFactoryElement(root.evalNode(&quot;reflectorFactory&quot;));
    settingsElement(settings);
    // read it after objectFactory and objectWrapperFactory issue #631
    environmentsElement(root.evalNode(&quot;environments&quot;));
    databaseIdProviderElement(root.evalNode(&quot;databaseIdProvider&quot;));
    typeHandlerElement(root.evalNode(&quot;typeHandlers&quot;));
    //解析Mapper,加载映射文件,将mapper里的数据封装进Configuration
    mapperElement(root.evalNode(&quot;mappers&quot;));
  } catch (Exception e) {
    throw new BuilderException(&quot;Error parsing SQL Mapper Configuration. Cause: &quot; + e, e);
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mybatis一级缓存 源码分析]]></title>
        <id>https://KINNNNNNG.github.io/post/mybatis-yi-ji-huan-cun-yuan-ma-fen-xi/</id>
        <link href="https://KINNNNNNG.github.io/post/mybatis-yi-ji-huan-cun-yuan-ma-fen-xi/">
        </link>
        <updated>2021-03-02T13:43:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="what-是什么">what 是什么</h2>
<p>一个HashMap，PerpetualCache：一级缓存对象</p>
<h2 id="when-什么时候创建的">when 什么时候创建的</h2>
<p>在BaseeExecutor被创建时就创建了</p>
<h2 id="how-怎么工作的">how 怎么工作的</h2>
<p>在源代码<strong>BaseExecutor.java</strong> 中</p>
<p>在执行查询SQL以后</p>
<pre><code class="language-java">list = resultHandler == null ? (List&lt;E&gt;) localCache.getObject(key) : null;
      if (list != null) {
        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);
      } else {
        list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);
      }
</code></pre>
<p>从localCache中取数据，为null的时候进入queryFromDatabase（执行sql的函数）</p>
<pre><code class="language-java">localCache.putObject(key, EXECUTION_PLACEHOLDER);
    try {
      list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);
    } finally {
      localCache.removeObject(key);
    }
    localCache.putObject(key, list);
    if (ms.getStatementType() == StatementType.CALLABLE) {
      localOutputParameterCache.putObject(key, parameter);
    }
    return list;
</code></pre>
<p>先执行<strong>doQuery</strong> 执行SQL，在finally将原来在缓存的数据删除，再将新数据放入一级缓存中</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GWFList备份]]></title>
        <id>https://KINNNNNNG.github.io/post/gwflist-bei-fen/</id>
        <link href="https://KINNNNNNG.github.io/post/gwflist-bei-fen/">
        </link>
        <updated>2020-09-21T13:05:31.000Z</updated>
        <content type="html"><![CDATA[<p>! Put user rules line by line in this file.<br>
! See https://adblockplus.org/en/filter-cheatsheet<br>
||github.com^<br>
||python.org^<br>
||ssrcloud.org^<br>
||ssrcloud.com^<br>
||pjreddie.com^<br>
||javlibrary.com^<br>
||oracle.com^<br>
||apache.org^<br>
||gamehivegames.com^<br>
||javlibrary.com^<br>
||hanime.tv^<br>
||ted.com^<br>
||btcc.com^<br>
||busdmm.us^<br>
||rarbgmirror.org^<br>
||codesandbox.io^<br>
||gamer.com.tw^<br>
||segaretro.org^<br>
||byethost9.com^<br>
||byethost.com^<br>
||185.27.134.9^<br>
||topazlabs.com^<br>
||stackoverflow.com^<br>
||googleapis.com^<br>
||flutter.dev^<br>
||python.org^<br>
||remaxjs.org^<br>
||ant.design^<br>
||typora.io^<br>
||cloudflare.com^<br>
||haoweichi.com^<br>
||fakenamegenerator.com^<br>
||jetbrains.com^<br>
||mysql.com^<br>
||sourceforge.net^<br>
||gutenberg.org^<br>
||centos.org^<br>
||maven.org^<br>
||microsoft.com^<br>
||loli.cool^<br>
||91porn.com^<br>
||xvideos.com^<br>
||xda-developers.com^<br>
||sourceforge.net^<br>
||trello.com^<br>
||notion.so^<br>
||epicgames.com^<br>
||tower.jp^<br>
||apache.org^<br>
||reddit.com^<br>
||yahoo.co.jp^<br>
||69.run^<br>
||gotpd.link^<br>
||ntt-co-jp.club^<br>
||github.com^<br>
||appinn.com^<br>
||pcredivewiki.tw^<br>
||gradle.org^<br>
||torrentkitty.tv^<br>
||javbus.com^<br>
||unsplash.com^</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[.env 全局配置的使用]]></title>
        <id>https://KINNNNNNG.github.io/post/env-quan-ju-pei-zhi-de-shi-yong/</id>
        <link href="https://KINNNNNNG.github.io/post/env-quan-ju-pei-zhi-de-shi-yong/">
        </link>
        <updated>2020-03-07T04:30:04.000Z</updated>
        <content type="html"><![CDATA[<p>.env 全局默认配置文件，不论什么环境都会加载合并</p>
<p>.env.development 开发环境下的配置文件</p>
<p>.env.production 生产环境下的配置文件</p>
<hr>
<p>关于文件内容：</p>
<p><strong>注意：属性名必须以VUE_APP_开头，比如VUE_APP_XXX</strong></p>
<hr>
<p>关于文件的加载：</p>
<p>根据启动命令vue会自动加载对应的环境，vue是根据文件名进行加载的，所以上面说“不要乱起名，也无需专门控制加载哪个文件”</p>
<p>比如执行npm run serve命令，会自动加载.env.development文件</p>
<p>全局配置中的属性会被开发环境或生成环境下的配置文件所替换</p>
<blockquote>
<p>本文链接：https://blog.csdn.net/w405722907/article/details/94720868</p>
</blockquote>
]]></content>
    </entry>
</feed>